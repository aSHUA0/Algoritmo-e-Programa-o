#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct Funcionario {
  int quantidade;
  float salarioFinal;
  int id;
  struct Funcionario *proximo;
} Funcionario;

Funcionario *criarLista() { return NULL; }

Funcionario *criarPessoa() {
  Funcionario *novoFuncionario = (Funcionario *)malloc(sizeof(Funcionario));
  if (novoFuncionario == NULL) {
    printf("Erro de alocacao de memoria");
    exit(EXIT_FAILURE);
  }
  novoFuncionario->proximo = NULL;
  return novoFuncionario;
}

float calculoSalario(int N1) {
  float total;

  if (N1 <= 50) {
    total = 600;
  } else if (N1 > 50 && N1 <= 80) {
    total = (N1 - 50) * 0.5 + 600;
  } else {
    total = N1 * 0.75 + 600;
  }
  return total;
}

Funcionario *cadastrar(Funcionario *lista) {
  srand(time(NULL));
  Funcionario *novoFuncionario = criarPessoa();
  novoFuncionario->id = rand() % 100;
  printf("Digite o numero de peças feitas: ");
  scanf("%d", &novoFuncionario->quantidade);
  novoFuncionario->salarioFinal = 0;
  novoFuncionario->salarioFinal = calculoSalario(novoFuncionario->quantidade);

  if (lista == NULL) {
    return novoFuncionario;
  } else {
    Funcionario *atual = lista;
    while (atual->proximo != NULL) {
      atual = atual->proximo;
    }
    atual->proximo = novoFuncionario;
    return lista;
  }
}
void mostrarLista(Funcionario *lista) {
  Funcionario *atual = lista;
  if (lista == NULL) {
    printf("\nLista nula\n");
    return;
  } else {
    while (atual != NULL) {
      printf("\nQuantidade de peças: %d", atual->quantidade);
      printf("\nSalario Final: %.2f", atual->salarioFinal);
      printf("\nID: %d\n", atual->id);
      atual = atual->proximo;
    }
  }
}
void liberarLista(Funcionario *lista) {
  Funcionario *atual = lista;
  Funcionario *proximo;
  while (atual != NULL) {
    proximo = atual->proximo;
    free(atual);
    atual = proximo;
  }
}

int main() {
  int opcao;
  Funcionario *lista = criarLista();
  do {
    printf("Digite 1 para cadstrar novo funcionário\n");
    printf("Digite 2 para mostrar funcionários cadstrados\n");
    printf("Digite 0 para sair\n");
    scanf("%d", &opcao);
    if (opcao == 1) {
      lista = cadastrar(lista);
    } else if (opcao == 2) {
      mostrarLista(lista);
    } else if (opcao != 1 && opcao != 2 && opcao != 0){
      printf("Opção invalida");
    }
  } while (opcao != 0);

  liberarLista(lista);
  return 0;
}
